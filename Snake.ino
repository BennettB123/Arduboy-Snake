#include <Arduboy2.h>

const uint8_t PROGMEM start_menu_sprite[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xfc, 0xde, 0xde, 0x8f, 0x8f, 0x87, 0x87, 0x87, 0x87, 0x87, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0x78, 0x78, 0xf0, 0xf0, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3c, 0x1c, 0x1e, 0x7e, 0xff, 0xff, 0xc7, 0x83, 0x01, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfd, 0xfc, 0xdd, 0xdd, 0x9f, 0x9f, 0x9f, 0x8f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x3f, 0xff, 0xfe, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0x8f, 0x00, 0x00, 0x01, 0x01, 0x07, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x07, 0x1f, 0x1f, 0x3f, 0x3c, 0x3c, 0x3e, 0x1f, 0x3f, 0x3f, 0x30, 0x38, 0x18, 0x00, 0x0f, 0x1f, 0x1f, 0x10, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0f, 0x0f, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x38, 0x78, 0x78, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x78, 0x78, 0x3c, 0x3f, 0x3f, 0x1f, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x60, 0x30, 0x18, 0x08, 0x8c, 0x84, 0x84, 0x86, 0x82, 0x0a, 0x02, 0xce, 0xe8, 0xa8, 0xa8, 0xb0, 0x80, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xe0, 0x30, 0x10, 0x50, 0x93, 0x14, 0x38, 0x60, 0x80, 0x03, 0x0c, 0x38, 0xe0, 0x81, 0x01, 0x02, 0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x19, 0x62, 0xc6, 0x8c, 0x88, 0x98, 0x10, 0x10, 0x10, 0x9f, 0xb0, 0xe0, 0xc0, 0x81, 0x82, 0x04, 0x08, 0x10, 0x11, 0x12, 0x12, 0x13, 0x12, 0x24, 0x24, 0x24, 0x27, 0x21, 0x11, 0x0a, 0x8c, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM volume_off_sprite[] = {
12, 12,
0x70, 0x70, 0xfc, 0xfe, 0xff, 0xff, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 
0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM volume_on_sprite[] = {
12, 12,
0x70, 0x70, 0xfc, 0xfe, 0xff, 0xff, 0x00, 0x04, 0xf9, 0x02, 0xfc, 0x00, 
0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x00, 0x01, 0x04, 0x02, 0x01, 0x00, 
};

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define GRID_SCALE 8

// For accessing the snake's coordinates
#define X 0
#define Y 1

#define MIN_X 0
#define MIN_Y 0
#define MAX_X (SCREEN_WIDTH / GRID_SCALE) - 1
#define MAX_Y (SCREEN_HEIGHT / GRID_SCALE) - 1

#define MAX_SNAKE_SIZE (SCREEN_WIDTH / GRID_SCALE) * (SCREEN_HEIGHT / GRID_SCALE)

enum Direction
{
    Up,
    Down,
    Left,
    Right
};

bool in_start_menu = true;
bool game_over = false;
bool game_won = false;
bool volume_on = true;

int16_t snake[MAX_SNAKE_SIZE][2]; // snake[0] is the head
uint8_t fruit[2];

uint8_t speed = 10; // number of frames between moves
uint8_t speed_counter = 0;
uint8_t snake_size = 1;

Direction direction = Right;
Direction nextDirection = Right;
bool needToGrow = false;

Arduboy2 arduboy;
BeepPin1 beeper;

void setup()
{
    // initialize the arduboy
    arduboy.initRandomSeed();
    arduboy.begin();
    arduboy.setFrameRate(60);
    beeper.begin();

    spawnFruit();
}

void loop()
{
    // pause render until it's time for the next frame
    if (!(arduboy.nextFrame()))
        return;

    arduboy.pollButtons();
    arduboy.clear();
    beeper.timer();

    if (in_start_menu) {
        drawStartScreen();
        arduboy.display();

        if (arduboy.pressed(A_BUTTON))
            in_start_menu = false;

        if (arduboy.justPressed(B_BUTTON)) {
            volume_on = !volume_on;
            beep();
        }

        return;
    }

    if (!game_over && !game_won) {
        handleInput();

        if (speed_counter >= speed){
            direction = nextDirection;
            moveSnake();
            speed_counter = 0;
        }
        speed_counter++;

        checkCollisions();

        drawScreenBorder();
        drawSnake();
        drawFruit();
    }

    if (game_over) {
        drawGameOverScreen();
        if (arduboy.anyPressed(A_BUTTON | B_BUTTON | UP_BUTTON | DOWN_BUTTON | LEFT_BUTTON | RIGHT_BUTTON))
            resetGame();
    }

    if (game_won) {
        drawGameWinScreen();
        if (arduboy.anyPressed(A_BUTTON | B_BUTTON | UP_BUTTON | DOWN_BUTTON | LEFT_BUTTON | RIGHT_BUTTON))
            resetGame();
    }
    

    arduboy.display();
}

void beep() {
    if (volume_on)
        beeper.tone(beeper.freq(1000), 2);
}

void resetGame() {
    game_over = false;
    game_won = false;
    snake_size = 1;
    direction = Right;
    nextDirection = Right;
    for (int i = 0; i < MAX_SNAKE_SIZE; i++) {
        snake[i][X] = 0;
        snake[i][Y] = 0;
    }
    spawnFruit();
}

void drawStartScreen() {
    // draw start screen image and "made by Bennett" text
    Sprites::drawOverwrite(0, 0, start_menu_sprite, 0);
    arduboy.setCursor(64, 28);
    arduboy.print("made by\n");
    arduboy.setCursorX(64);
    arduboy.print("Bennett");

    // draw menu options
    arduboy.setCursor(48, 52);
    arduboy.print("A:start  B:");
    if (volume_on)
        Sprites::drawOverwrite(115, 50, volume_on_sprite, 0);
    else
        Sprites::drawOverwrite(115, 50, volume_off_sprite, 0);
}

void drawGameOverScreen() {
    // use setCursor as a lazy way to center the text
    arduboy.setCursor(12, 16);
    arduboy.setTextSize(2);
    arduboy.println("Game Over");

    arduboy.setTextSize(1);
    arduboy.setCursorX(16);
    arduboy.println("press any button");
    arduboy.setCursorX(40);
    arduboy.print("to retry");
}

void drawGameWinScreen() {
    // use setCursor as a lazy way to center the text
    arduboy.setCursor(14, 16);
    arduboy.setTextSize(2);
    arduboy.println("You Win!");

    arduboy.setTextSize(1);
    arduboy.setCursorX(18);
    arduboy.println("press any button");
    arduboy.setCursorX(32);
    arduboy.print("to restart");
}

void spawnFruit()
{
    do
    {
        fruit[X] = random(0, MAX_X + 1);
        fruit[Y] = random(0, MAX_Y + 1);
    } while (!fruitLocationOk());
}

bool fruitLocationOk()
{
    for (int i = 0; i < snake_size; i++)
    {
        if (fruit[X] == snake[i][X] && fruit[Y] == snake[i][Y])
            return false;
    }
    return true;
}

void handleInput()
{
    if (arduboy.pressed(UP_BUTTON) && direction != Down)
        nextDirection = Up;
    else if (arduboy.pressed(RIGHT_BUTTON) && direction != Left)
        nextDirection = Right;
    else if (arduboy.pressed(DOWN_BUTTON) && direction != Up)
        nextDirection = Down;
    else if (arduboy.pressed(LEFT_BUTTON) && direction != Right)
        nextDirection = Left;
}

void moveSnake()
{
    int8_t last_x = snake[0][X];
    int8_t last_y = snake[0][Y];

    // Move snake's head
    switch (direction)
    {
    case Up:
        snake[0][Y] -= 1;
        if (snake[0][Y] < MIN_Y)
            snake[0][Y] = MAX_Y;
        break;
    case Down:
        snake[0][Y] += 1;
        if (snake[0][Y] > MAX_Y)
            snake[0][Y] = MIN_Y;
        break;
    case Left:
        snake[0][X] -= 1;
        if (snake[0][X] < MIN_X)
            snake[0][X] = MAX_X;
        break;
    case Right:
        snake[0][X] += 1;
        if (snake[0][X] > MAX_X)
            snake[0][X] = MIN_X;
        break;
    }

    for (int i = 1; i < snake_size; i++)
    {
        int8_t temp_x = snake[i][X];
        int8_t temp_y = snake[i][Y];
        snake[i][X] = last_x;
        snake[i][Y] = last_y;
        last_x = temp_x;
        last_y = temp_y;
    }

    if (needToGrow)
    {
        snake[snake_size][X] = last_x;
        snake[snake_size][Y] = last_y;
        snake_size++;
        needToGrow = false;
    }
}

void checkCollisions()
{
    // snake head and fruit
    if (snake[0][X] == fruit[X] && snake[0][Y] == fruit[Y])
    {
        if (snake_size >= MAX_SNAKE_SIZE)
        {
            game_won = true;
        }
        needToGrow = true;
        spawnFruit();
        beep();
    }

    // snake head and snake body
    for (int i = 1; i < snake_size; i++)
    {
        if (snake[0][X] == snake[i][X] && snake[0][Y] == snake[i][Y])
        {
            game_over = true;
            play_death_animation();
        }
    }
}

void drawScreenBorder() {
    arduboy.drawRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
}

void drawSnake()
{
    for (int i = 0; i < snake_size; i++)
    {
        arduboy.fillRect(snake[i][X] * GRID_SCALE, snake[i][Y] * GRID_SCALE, GRID_SCALE, GRID_SCALE, WHITE);
    }
}

void drawFruit()
{
    uint8_t r = (GRID_SCALE / 2) - 1;
    uint8_t x = (fruit[X] * GRID_SCALE) + r;
    uint8_t y = (fruit[Y] * GRID_SCALE) + r;
    arduboy.drawCircle(x, y, r, WHITE);
}

void play_death_animation() {
    int flash = 0;
    int flash_target = 10;

    // flash the snake's head for a bit
    for (int i = 0; i < 100; i++) {
        while(!arduboy.nextFrame());

        drawScreenBorder();
        drawSnake();
        drawFruit();

        flash++;
        if (flash >= flash_target) {
            arduboy.fillRect(snake[0][X] * GRID_SCALE, snake[0][Y] * GRID_SCALE, GRID_SCALE, GRID_SCALE, BLACK);
        }
        if (flash >= flash_target * 2)
            flash = 0;

        arduboy.display();
    }
}
